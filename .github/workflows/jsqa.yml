name: JS QA

on:
  push:
    branches: 
      - main
      - devel
    paths:
      - '**.js'
      - '**.jsx'
      - '**.ts'
      - '**.tsx'
      - '**.json'
      - 'package.json'
      - 'package-lock.json'
      - 'jsqa.yml'
  pull_request:
    branches: 
      - main
      - devel
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js environment
      uses: actions/setup-node@v6.0.0
      # with:
        # Set always-auth in npmrc.
        # always-auth: # optional, default is false
        # Version Spec of the version to use. Examples: 12.x, 10.15.1, >=10.15.0.
        # node-version: # optional
        # File containing the version Spec of the version to use.  Examples: package.json, .nvmrc, .node-version, .tool-versions.
        # node-version-file: # optional
        # Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default.
        # architecture: # optional
        # Set this option if you want the action to check for the latest available version that satisfies the version spec.
        # check-latest: # optional
        # Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN.
        # registry-url: # optional
        # Optional scope for authenticating against scoped registries. Will fall back to the repository owner when using the GitHub Packages registry (https://npm.pkg.github.com/).
        # scope: # optional
        # Used to pull node distributions from node-versions. Since there's a default, this is typically not supplied by the user. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
        # token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
        # Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm.
        # cache: # optional
        # Set to false to disable automatic caching. By default, caching is enabled when either devEngines.packageManager or the top-level packageManager field in package.json specifies npm as the package manager.
        # package-manager-cache: # optional, default is true
        # Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies.
        # cache-dependency-path: # optional
        # Used to specify an alternative mirror to downlooad Node.js binaries from
        # mirror: # optional
        # The token used as Authorization header when fetching from the mirror
        # mirror-token: # optional
          
    # - name: Setup PHP
    #   uses: shivammathur/setup-php@v2
    #   with:
    #     php-version: 8.4

    # - name: Validate composer.json and composer.lock
    #   run: composer validate --strict

    # - name: Cache Composer packages
    #   id: composer-cache
    #   uses: actions/cache@v4
    #   with:
    #     path: vendor
    #     key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
    #     restore-keys: |
    #       ${{ runner.os }}-php-

    - name: Install dependencies
      run: npm install

    - name: Run test suite
      run: npm run test
